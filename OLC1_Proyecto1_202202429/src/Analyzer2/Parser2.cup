package Analyzer2;
import AST.IAST;
import AST.MainStmt;
import AST.RunStmt;
import AST.MatchStmt;
import AST.Strategy;
import AST.IfStmt;
import AST.BoolExpr;
import AST.BoolCond;
import AST.Srandom;
import AST.Sround_number;
import AST.Stotal_rounds;
import AST.Fget_move;
import AST.Flast_move;
import AST.Fget_last_n_moves;
import AST.Fget_moves_count;
import AST.Literal;


import java.util.ArrayList;
import java_cup.runtime.Symbol;

parser code {:
    public ArrayList<IAST> AST = new ArrayList<>();
    
:}

action code
{:  :}


terminal STRAT, MATCH, MAIN, INITIAL, RULES, IF, THEN, ELSE, SCORING, RUN, WITH, SEED, PLAYERS, STRATS, ROUNDS, MUTUAL;
terminal COOPERATION, DEFECTION, BETRAYAL, REWARD, PUNISHMENT, AND, OR, EQUAL, INEQUAL, GREATER_THAN, LOWER_THAN;
terminal ROUNDOPEN, ROUNDCLOSE, GET_MOVE, LAST_MOVE, GET_MOVES_COUNT, GET_LAST_N_MOVES, ROUND_NUMBER, OPPONENT_HISTORY, SELF_HISTORY, TOTAL_ROUNDS, RANDOM;     
terminal GREATER_OR_EQUAL, LOWER_OR_EQUAL, CURLYOPEN, CURLYCLOSE, SQUAREOPEN, SQUARECLOSE, COLON, COMMA, DECISION, FLOAT, ID;        
terminal INTEGER;

non terminal S;
non terminal ArrayList<RunStmt> runLst;
non terminal ArrayList<String> matchesIds;
non terminal RunStmt runStmt;
non terminal MainStmt mainStmt;
non terminal ArrayList<MatchStmt> matches; 
non terminal MatchStmt matchStmt;
non terminal ArrayList<Strategy> strategy; 
non terminal Strategy stratStmt;
non terminal ArrayList<IAST> conditions;
non terminal BoolExpr booleanExpression;
non terminal BoolCond booleanCondition;
non terminal ArrayList<String> decisionList;
non terminal IAST func, ifStmt;
non terminal IAST actions, side, state, arg1, arg2, history;
non terminal String logical, comparison;

precedence nonassoc EQUAL, INEQUAL, LOWER_THAN, GREATER_THAN, LOWER_OR_EQUAL, GREATER_OR_EQUAL; 
precedence left AND; 
precedence left OR;   

start with S;


S ::= strategy:s matches:ma mainStmt:b {:for (Strategy st : s) {
                                            parser.AST.add(st);
                                        }
                                        for (MatchStmt m : ma) {
                                            parser.AST.add(m);
                                        }
                                        parser.AST.add(b); :};
 
                          
matches ::= matches:m matchStmt:ms {:RESULT = m; RESULT.add(ms);:}
        | matchStmt:ms {:RESULT = new ArrayList<MatchStmt>(); RESULT.add(ms); :} ;

matchStmt ::= MATCH ID:id CURLYOPEN 
                PLAYERS STRATS COLON SQUAREOPEN ID:id1 COMMA ID:id2 SQUARECLOSE
                ROUNDS COLON INTEGER:in 
                SCORING COLON CURLYOPEN 
                    MUTUAL COOPERATION COLON INTEGER:i COMMA 
                    MUTUAL DEFECTION COLON INTEGER:i1 COMMA
                    BETRAYAL REWARD COLON INTEGER:i2 COMMA
                    BETRAYAL PUNISHMENT COLON INTEGER:i3  
                CURLYCLOSE 
            CURLYCLOSE {:RESULT = new MatchStmt(id.toString(), id1.toString(), id2.toString(), Integer.parseInt(in.toString()));
                            RESULT.setScoring("mutual cooperation",Integer.parseInt(i.toString()));
                            RESULT.setScoring("mutual defection",Integer.parseInt(i1.toString()));
                            RESULT.setScoring("betrayal reward",Integer.parseInt(i2.toString()));
                            RESULT.setScoring("betrayal punishment",Integer.parseInt(i3.toString()));:};

  
mainStmt ::= MAIN CURLYOPEN runLst:m CURLYCLOSE {: RESULT = new MainStmt(m); :} ;


runLst ::= runLst:rl  runStmt:r {: RESULT = rl; RESULT.add(r); :} 
                | runStmt:r {: RESULT = new ArrayList<RunStmt>(); RESULT.add(r); :} ; 

runStmt ::= RUN SQUAREOPEN matchesIds:Ids SQUARECLOSE WITH CURLYOPEN SEED COLON INTEGER:s CURLYCLOSE{: RESULT = new RunStmt(Ids, Integer.parseInt(s.toString()));:} ; 

matchesIds ::= matchesIds:i COMMA ID:i1 {:RESULT = i; RESULT.add(i1.toString()); :}  
                | ID:i {: RESULT = new ArrayList<String>(); RESULT.add(i.toString());  :};         

strategy ::= strategy:str  stratStmt:s {:RESULT = str; RESULT.add(s); :}
            | stratStmt:s{:RESULT = new ArrayList<Strategy>(); RESULT.add(s);:};

stratStmt ::= STRAT ID:id CURLYOPEN 
                        INITIAL COLON DECISION:d 
                        RULES:r COLON SQUAREOPEN conditions:c SQUARECLOSE 
                CURLYCLOSE {:RESULT = new Strategy(id.toString(), d.toString(), c);:};
                                            
conditions ::= conditions:cs ifStmt:c {:RESULT = cs; RESULT.add(c);:} 
                | ifStmt:c {:RESULT = new ArrayList<IAST>(); RESULT.add(c); :} 
                ;


ifStmt ::= IF booleanExpression:bc THEN actions:d COMMA{:RESULT = new IfStmt(bc, d); :}
        | ELSE actions:e{:RESULT = e;:};


            
booleanExpression ::= booleanExpression:bs logical:l booleanExpression:b {:RESULT = new BoolExpr(bs, l, b);:}
                    | booleanCondition:b {:RESULT = new BoolExpr(b,null, null);:} ; 

booleanCondition ::= side:s1 comparison:s2 side:s3 {:RESULT = new BoolCond(s1,s2, s3); :} ;


side ::= func:f {:RESULT = f; :} 
        | state:s {:RESULT = s; :} 
        | DECISION:d {:RESULT = new Literal<>(d.toString()); :}
        | SQUAREOPEN decisionList:dl SQUARECLOSE {: RESULT = new Literal<>(dl); :}
        | INTEGER:f {:RESULT = new Literal<>(Integer.parseInt(f.toString())); :}
        | FLOAT:f {: RESULT = new Literal<>(Double.parseDouble(f.toString())); :};


actions ::= DECISION:c {:RESULT = new Literal<>(c.toString());:}
            |GET_MOVE ROUNDOPEN arg1:a1 COMMA arg2:a2 ROUNDCLOSE {:RESULT = new Fget_move(a1, a2);:}
            |LAST_MOVE ROUNDOPEN arg1:a1 ROUNDCLOSE {: RESULT = new Flast_move(a1); :}; 



logical ::= AND:a {: RESULT = a.toString(); :} 
            | OR:o {: RESULT = o.toString(); :};


state ::= ROUND_NUMBER {: RESULT = new Sround_number(); :} 
            | TOTAL_ROUNDS {: RESULT = new Stotal_rounds(); :}
            | RANDOM {: RESULT = new Srandom(); :} ;


func ::= GET_MOVE:n ROUNDOPEN arg1:a1 COMMA arg2:a2 ROUNDCLOSE {: RESULT = new Fget_move(a1, a2); :}
        | LAST_MOVE:n ROUNDOPEN arg1:a1 ROUNDCLOSE {: RESULT = new Flast_move(a1); :} 
        | GET_MOVES_COUNT:n ROUNDOPEN arg1:a1 COMMA arg2:a2 ROUNDCLOSE {:RESULT = new Fget_moves_count(a1, a2); :}
        | GET_LAST_N_MOVES:n ROUNDOPEN arg1:a1 COMMA arg2:a2 ROUNDCLOSE  {: RESULT = new Fget_last_n_moves(a1, a2); :}; 

arg1 ::= history:h {: RESULT = h; :} 
        | func:h {: RESULT = h; :}
        | state:h {: RESULT = h; :} ;

arg2 ::= INTEGER:h {: RESULT = new Literal<>(Integer.parseInt(h.toString())); :}  
        | DECISION:h {: RESULT = new Literal<>(h.toString()); :}  
        | func:h {: RESULT = h; :} 
        | state:h {: RESULT = h; :};

comparison ::= EQUAL:c {: RESULT = c.toString(); :} 
               | INEQUAL:c {: RESULT = c.toString(); :} 
               | LOWER_THAN:c {: RESULT = c.toString();:} 
               | GREATER_THAN:c {: RESULT = c.toString(); :} 
               | LOWER_OR_EQUAL:c {: RESULT = c.toString();:} 
               | GREATER_OR_EQUAL:c {: RESULT = c.toString();:} ;


history ::= OPPONENT_HISTORY:h {: RESULT = new Literal<>("opponent_history"); :} 
            | SELF_HISTORY:h {: RESULT = new Literal<>("self_history"); :};

decisionList ::=  decisionList:d0 COMMA DECISION:d {: RESULT = d0; RESULT.add(d.toString()); :} 
                | DECISION:d {: RESULT = new ArrayList<String>(); RESULT.add(d.toString());  :} ;  
// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analyzer2/Lexer2.jflex

package Analyzer2;
import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\1\1\4"+
    "\1\0\1\5\2\0\1\6\1\0\1\7\1\10\2\0"+
    "\1\11\1\0\1\12\1\0\12\13\1\14\1\0\1\15"+
    "\1\16\1\17\2\0\2\20\2\21\26\20\1\22\1\0"+
    "\1\23\1\0\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\20\1\36\1\37"+
    "\1\40\1\41\1\42\1\20\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\20\1\51\1\20\1\52\1\53\1\54"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\1\1\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\16\12\1\16\1\1\1\17\1\20\1\21"+
    "\2\0\1\22\1\23\1\24\5\12\1\25\21\12\1\26"+
    "\1\27\1\0\21\12\1\30\7\12\1\2\3\12\1\31"+
    "\3\12\1\32\12\12\1\33\2\12\1\34\1\12\1\35"+
    "\7\12\1\36\7\12\1\37\13\12\1\40\3\12\1\41"+
    "\1\42\1\12\1\43\11\12\1\44\2\12\1\45\2\12"+
    "\1\46\3\12\1\47\3\12\1\50\6\12\1\51\2\12"+
    "\1\52\2\12\1\53\12\12\1\54\2\12\1\55\1\12"+
    "\1\56\11\12\1\57\1\60\1\61\7\12\1\62\1\12"+
    "\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\55\0\55"+
    "\0\55\0\u010e\0\55\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01c2"+
    "\0\55\0\55\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0"+
    "\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438"+
    "\0\55\0\u0465\0\55\0\55\0\55\0\u0492\0\u04bf\0\55"+
    "\0\55\0\55\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u01c2"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870"+
    "\0\u089d\0\55\0\u0492\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u01c2\0\u0bf4\0\u0c21"+
    "\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\55\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u01c2\0\u0db6\0\u0de3\0\u0e10\0\u01c2\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u01c2\0\u0fff\0\u102c\0\u01c2\0\u1059\0\u01c2\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u01c2\0\u11c1\0\u11ee"+
    "\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u01c2\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u01c2\0\u14eb\0\u1518\0\u1545\0\u01c2\0\u01c2\0\u1572"+
    "\0\u01c2\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u01c2\0\u1734\0\u1761\0\u01c2\0\u178e\0\u17bb"+
    "\0\u01c2\0\u17e8\0\u1815\0\u1842\0\u01c2\0\u186f\0\u189c\0\u18c9"+
    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u01c2"+
    "\0\u1a31\0\u1a5e\0\u01c2\0\u1a8b\0\u1ab8\0\u01c2\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u01c2\0\u1ca7\0\u1cd4\0\u01c2\0\u1d01\0\u01c2\0\u1d2e\0\u1d5b"+
    "\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4"+
    "\0\u1fd1\0\u01c2\0\u1ffe\0\u01c2\0\u01c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\17\1\23\1\24\1\25\1\26"+
    "\1\17\1\27\1\17\1\30\1\31\1\32\1\17\1\33"+
    "\1\34\1\35\1\36\1\37\2\17\1\40\1\17\1\41"+
    "\1\42\1\43\56\0\2\3\70\0\1\44\36\0\2\5"+
    "\1\0\52\5\6\0\1\45\60\0\1\46\1\12\4\0"+
    "\2\17\2\0\26\17\7\0\1\47\11\0\1\50\54\0"+
    "\1\51\54\0\1\52\51\0\1\17\4\0\2\17\2\0"+
    "\26\17\16\0\1\17\4\0\2\17\2\0\5\17\1\53"+
    "\20\17\16\0\1\17\4\0\2\17\2\0\15\17\1\54"+
    "\10\17\16\0\1\17\4\0\2\17\2\0\5\17\1\55"+
    "\20\17\16\0\1\17\4\0\2\17\2\0\12\17\1\56"+
    "\13\17\16\0\1\17\4\0\2\17\2\0\5\17\1\57"+
    "\20\17\16\0\1\17\4\0\2\17\2\0\6\17\1\60"+
    "\5\17\1\61\11\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\62\24\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\63\20\17\1\64\3\17\16\0\1\17\4\0"+
    "\2\17\2\0\16\17\1\65\7\17\16\0\1\17\4\0"+
    "\2\17\2\0\12\17\1\66\7\17\1\67\3\17\16\0"+
    "\1\17\4\0\2\17\2\0\1\17\1\70\3\17\1\71"+
    "\7\17\1\72\4\17\1\73\3\17\16\0\1\17\4\0"+
    "\2\17\2\0\3\17\1\74\1\17\1\75\13\17\1\76"+
    "\4\17\16\0\1\17\4\0\2\17\2\0\10\17\1\77"+
    "\4\17\1\100\10\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\101\14\17\56\0\1\102\14\0\1\103\41\0"+
    "\4\47\1\104\50\47\13\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\105\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\15\17\1\106\10\17\16\0\1\17\4\0\2\17\2\0"+
    "\6\17\1\107\17\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\110\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\111\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\112\14\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\113\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\114\7\17\1\115\4\17\16\0\1\17\4\0"+
    "\2\17\2\0\21\17\1\116\4\17\16\0\1\17\4\0"+
    "\2\17\2\0\16\17\1\117\7\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\120\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\14\17\1\121\11\17\16\0\1\17\4\0"+
    "\2\17\2\0\14\17\1\122\11\17\16\0\1\17\4\0"+
    "\2\17\2\0\24\17\1\123\1\17\16\0\1\17\4\0"+
    "\2\17\2\0\22\17\1\124\3\17\16\0\1\17\4\0"+
    "\2\17\2\0\12\17\1\125\1\17\1\126\11\17\16\0"+
    "\1\17\4\0\2\17\2\0\15\17\1\127\10\17\16\0"+
    "\1\17\4\0\2\17\2\0\5\17\1\130\4\17\1\131"+
    "\13\17\16\0\1\17\4\0\2\17\2\0\17\17\1\132"+
    "\6\17\16\0\1\17\4\0\2\17\2\0\5\17\1\133"+
    "\20\17\16\0\1\17\4\0\2\17\2\0\21\17\1\134"+
    "\4\17\16\0\1\17\4\0\2\17\2\0\21\17\1\135"+
    "\4\17\3\0\4\47\1\104\12\47\1\136\35\47\13\0"+
    "\1\17\4\0\2\17\2\0\17\17\1\137\6\17\16\0"+
    "\1\17\4\0\2\17\2\0\16\17\1\140\7\17\16\0"+
    "\1\17\4\0\2\17\2\0\5\17\1\141\20\17\16\0"+
    "\1\17\4\0\2\17\2\0\5\17\1\142\20\17\16\0"+
    "\1\17\4\0\2\17\2\0\1\143\25\17\16\0\1\17"+
    "\4\0\2\17\2\0\21\17\1\144\4\17\16\0\1\17"+
    "\4\0\2\17\2\0\21\17\1\145\4\17\16\0\1\17"+
    "\4\0\2\17\2\0\14\17\1\146\11\17\16\0\1\17"+
    "\4\0\2\17\2\0\3\17\1\147\22\17\16\0\1\17"+
    "\4\0\2\17\2\0\22\17\1\150\3\17\16\0\1\17"+
    "\4\0\2\17\2\0\15\17\1\151\10\17\16\0\1\17"+
    "\4\0\2\17\2\0\25\17\1\152\16\0\1\17\4\0"+
    "\2\17\2\0\11\17\1\153\14\17\16\0\1\17\4\0"+
    "\2\17\2\0\4\17\1\154\21\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\155\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\14\17\1\156\11\17\16\0\1\17\4\0"+
    "\2\17\2\0\5\17\1\157\20\17\16\0\1\17\4\0"+
    "\2\17\2\0\17\17\1\160\6\17\16\0\1\17\4\0"+
    "\2\17\2\0\4\17\1\161\21\17\16\0\1\17\4\0"+
    "\2\17\2\0\6\17\1\162\17\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\163\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\14\17\1\164\11\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\165\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\10\17\1\166\15\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\167\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\5\17\1\170\20\17\16\0\1\17\4\0"+
    "\2\17\2\0\3\17\1\171\22\17\16\0\1\17\4\0"+
    "\2\17\2\0\12\17\1\172\1\173\12\17\16\0\1\17"+
    "\4\0\2\17\2\0\11\17\1\174\14\17\16\0\1\17"+
    "\4\0\2\17\2\0\1\175\25\17\16\0\1\17\4\0"+
    "\2\17\2\0\10\17\1\176\15\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\17\1\177\24\17\16\0\1\17\4\0"+
    "\2\17\2\0\14\17\1\200\11\17\16\0\1\17\4\0"+
    "\2\17\2\0\5\17\1\201\20\17\16\0\1\17\4\0"+
    "\2\17\2\0\20\17\1\202\5\17\16\0\1\17\4\0"+
    "\2\17\2\0\15\17\1\203\10\17\16\0\1\17\4\0"+
    "\2\17\2\0\17\17\1\204\6\17\16\0\1\17\4\0"+
    "\2\17\2\0\4\17\1\205\21\17\16\0\1\17\4\0"+
    "\2\17\2\0\20\17\1\206\5\17\16\0\1\17\4\0"+
    "\2\17\2\0\11\17\1\207\14\17\16\0\1\17\4\0"+
    "\2\17\2\0\1\210\25\17\16\0\1\17\4\0\2\17"+
    "\2\0\21\17\1\211\4\17\16\0\1\17\4\0\2\17"+
    "\2\0\12\17\1\212\13\17\16\0\1\17\4\0\2\17"+
    "\2\0\25\17\1\213\16\0\1\17\4\0\2\17\2\0"+
    "\17\17\1\214\6\17\16\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\215\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\216\24\17\16\0\1\17\4\0\2\17\2\0"+
    "\15\17\1\217\10\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\220\24\17\16\0\1\17\4\0\2\17\2\0"+
    "\13\17\1\221\12\17\16\0\1\17\4\0\2\17\2\0"+
    "\12\17\1\222\13\17\16\0\1\17\4\0\2\17\2\0"+
    "\5\17\1\223\20\17\16\0\1\17\4\0\2\17\2\0"+
    "\17\17\1\224\6\17\16\0\1\17\4\0\2\17\2\0"+
    "\10\17\1\225\15\17\16\0\1\17\4\0\2\17\2\0"+
    "\13\17\1\226\12\17\16\0\1\17\4\0\2\17\2\0"+
    "\4\17\1\227\21\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\230\17\17\1\231\5\17\16\0\1\17\4\0\2\17"+
    "\2\0\14\17\1\232\11\17\16\0\1\17\4\0\2\17"+
    "\2\0\10\17\1\233\15\17\16\0\1\17\4\0\2\17"+
    "\2\0\5\17\1\234\20\17\16\0\1\17\4\0\2\17"+
    "\2\0\1\235\25\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\236\24\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\17\1\237\24\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\240\14\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\241\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\23\17\1\242\2\17\16\0\1\17\4\0\2\17\2\0"+
    "\12\17\1\243\13\17\16\0\1\17\4\0\2\17\2\0"+
    "\15\17\1\244\10\17\16\0\1\17\4\0\2\17\2\0"+
    "\14\17\1\245\11\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\246\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\13\17\1\247\12\17\16\0\1\17\4\0\2\17\2\0"+
    "\14\17\1\250\11\17\16\0\1\17\4\0\2\17\2\0"+
    "\7\17\1\251\16\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\252\14\17\16\0\1\17\4\0\2\17\2\0"+
    "\7\17\1\253\16\17\16\0\1\17\4\0\2\17\2\0"+
    "\17\17\1\254\6\17\16\0\1\17\4\0\2\17\2\0"+
    "\12\17\1\255\13\17\16\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\256\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\15\17\1\257\10\17\16\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\260\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\5\17\1\261\20\17\16\0\1\17\4\0\2\17\2\0"+
    "\23\17\1\262\2\17\16\0\1\17\4\0\2\17\2\0"+
    "\21\17\1\263\4\17\16\0\1\17\4\0\2\17\2\0"+
    "\5\17\1\264\20\17\16\0\1\17\4\0\2\17\2\0"+
    "\22\17\1\265\3\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\266\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\11\17\1\267\13\17\1\270\16\0\1\17\4\0\2\17"+
    "\2\0\15\17\1\271\10\17\16\0\1\17\4\0\2\17"+
    "\2\0\11\17\1\272\14\17\16\0\1\17\4\0\2\17"+
    "\2\0\14\17\1\273\11\17\16\0\1\17\4\0\2\17"+
    "\2\0\1\274\25\17\16\0\1\17\4\0\2\17\2\0"+
    "\20\17\1\275\5\17\16\0\1\17\4\0\2\17\2\0"+
    "\5\17\1\276\20\17\16\0\1\17\4\0\2\17\2\0"+
    "\1\277\25\17\16\0\1\17\4\0\2\17\2\0\14\17"+
    "\1\300\11\17\16\0\1\17\4\0\2\17\2\0\13\17"+
    "\1\301\12\17\16\0\1\17\4\0\2\17\2\0\21\17"+
    "\1\302\4\17\16\0\1\17\4\0\2\17\2\0\5\17"+
    "\1\303\20\17\16\0\1\17\4\0\2\17\2\0\22\17"+
    "\1\304\3\17\16\0\1\17\4\0\2\17\2\0\15\17"+
    "\1\305\10\17\16\0\1\17\4\0\2\17\2\0\14\17"+
    "\1\306\11\17\16\0\1\17\4\0\2\17\2\0\1\307"+
    "\25\17\16\0\1\17\4\0\2\17\2\0\10\17\1\310"+
    "\15\17\16\0\1\17\4\0\2\17\2\0\21\17\1\311"+
    "\4\17\16\0\1\17\4\0\2\17\2\0\2\17\1\312"+
    "\23\17\16\0\1\17\4\0\2\17\2\0\15\17\1\313"+
    "\10\17\16\0\1\17\4\0\2\17\2\0\20\17\1\314"+
    "\5\17\16\0\1\17\4\0\2\17\2\0\14\17\1\315"+
    "\11\17\16\0\1\17\4\0\2\17\2\0\14\17\1\316"+
    "\11\17\16\0\1\17\4\0\2\17\2\0\1\317\25\17"+
    "\16\0\1\17\4\0\2\17\2\0\3\17\1\320\22\17"+
    "\16\0\1\17\4\0\2\17\2\0\11\17\1\321\14\17"+
    "\16\0\1\17\4\0\2\17\2\0\5\17\1\322\20\17"+
    "\16\0\1\17\4\0\2\17\2\0\17\17\1\323\6\17"+
    "\16\0\1\17\4\0\2\17\2\0\4\17\1\324\21\17"+
    "\16\0\1\17\4\0\2\17\2\0\13\17\1\325\12\17"+
    "\16\0\1\17\4\0\2\17\2\0\15\17\1\326\10\17"+
    "\16\0\1\17\4\0\2\17\2\0\20\17\1\327\5\17"+
    "\16\0\1\17\4\0\2\17\2\0\17\17\1\330\6\17"+
    "\16\0\1\17\4\0\2\17\2\0\25\17\1\331\16\0"+
    "\1\17\4\0\2\17\2\0\20\17\1\332\5\17\16\0"+
    "\1\17\4\0\2\17\2\0\15\17\1\333\10\17\16\0"+
    "\1\17\4\0\2\17\2\0\22\17\1\334\3\17\16\0"+
    "\1\17\4\0\2\17\2\0\21\17\1\335\4\17\16\0"+
    "\1\17\4\0\2\17\2\0\23\17\1\336\2\17\16\0"+
    "\1\17\4\0\2\17\2\0\14\17\1\337\11\17\16\0"+
    "\1\17\4\0\2\17\2\0\15\17\1\340\10\17\16\0"+
    "\1\17\4\0\2\17\2\0\5\17\1\341\20\17\16\0"+
    "\1\17\4\0\2\17\2\0\21\17\1\342\4\17\16\0"+
    "\1\17\4\0\2\17\2\0\17\17\1\343\6\17\16\0"+
    "\1\17\4\0\2\17\2\0\20\17\1\344\5\17\16\0"+
    "\1\17\4\0\2\17\2\0\25\17\1\345\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8235];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\1\1\1\11\5\1\2\11"+
    "\16\1\1\11\1\1\3\11\2\0\3\11\27\1\1\11"+
    "\1\1\1\0\31\1\1\11\207\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error e = new error("El caracter "+yytext()+" no pertenece al lenguaje", "Lexico", String.valueOf(yyline+1), String.valueOf(yycolumn+1));
                Lists.setErrorsList(e);
                String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline + 1)+" y columna: "+(yycolumn + 1);
                System.out.println(errLex);
            }
          // fall through
          case 53: break;
          case 2:
            { 
            }
          // fall through
          case 54: break;
          case 3:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPEN ROUND BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.ROUNDOPEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 55: break;
          case 4:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "CLOSE ROUND BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.ROUNDCLOSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 56: break;
          case 5:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "COMMA");
    Lists.setTokensList(t);   
    return new Symbol(sym.COMMA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 57: break;
          case 6:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "INTEGER");
    Lists.setTokensList(t);   
    return new Symbol(sym.INTEGER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 58: break;
          case 7:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "COLON");
    Lists.setTokensList(t);   
    return new Symbol(sym.COLON, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 59: break;
          case 8:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "LOWER THAN");
    Lists.setTokensList(t);   
    return new Symbol(sym.LOWER_THAN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 60: break;
          case 9:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GREATER THAN");
    Lists.setTokensList(t);   
    return new Symbol(sym.GREATER_THAN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 61: break;
          case 10:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "ID");
    Lists.setTokensList(t);   
    return new Symbol(sym.ID, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 62: break;
          case 11:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "DECISION");
    Lists.setTokensList(t);   
    return new Symbol(sym.DECISION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 63: break;
          case 12:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPEN SQUARE BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.SQUAREOPEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 64: break;
          case 13:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "CLOSE SQUARE BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.SQUARECLOSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 65: break;
          case 14:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPEN CURLY BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.CURLYOPEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 66: break;
          case 15:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "CLOSE CURLY BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.CURLYCLOSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 67: break;
          case 16:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "INEQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.INEQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 68: break;
          case 17:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "AND");
    Lists.setTokensList(t);   
    return new Symbol(sym.AND, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 69: break;
          case 18:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "LOWER OR EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.LOWER_OR_EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 70: break;
          case 19:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 71: break;
          case 20:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GREATER OR EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.GREATER_OR_EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 72: break;
          case 21:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD IF");
    Lists.setTokensList(t);   
    return new Symbol(sym.IF, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 73: break;
          case 22:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OR");
    Lists.setTokensList(t);   
    return new Symbol(sym.OR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 74: break;
          case 23:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "FLOAT");
    Lists.setTokensList(t);   
    return new Symbol(sym.FLOAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 75: break;
          case 24:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD RUN");
    Lists.setTokensList(t);   
    return new Symbol(sym.RUN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 76: break;
          case 25:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD ELSE");
    Lists.setTokensList(t);   
    return new Symbol(sym.ELSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 77: break;
          case 26:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MAIN");
    Lists.setTokensList(t);   
    return new Symbol(sym.MAIN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 78: break;
          case 27:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD SEED");
    Lists.setTokensList(t);   
    return new Symbol(sym.SEED, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 79: break;
          case 28:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD THEN");
    Lists.setTokensList(t);   
    return new Symbol(sym.THEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 80: break;
          case 29:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD WITH");
    Lists.setTokensList(t);   
    return new Symbol(sym.WITH, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 81: break;
          case 30:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MATCH");
    Lists.setTokensList(t);   
    return new Symbol(sym.MATCH, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 82: break;
          case 31:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD RULES");
    Lists.setTokensList(t);   
    return new Symbol(sym.RULES, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 83: break;
          case 32:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MUTUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.MUTUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 84: break;
          case 33:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RANDOM");
    Lists.setTokensList(t);   
    return new Symbol(sym.RANDOM, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 85: break;
          case 34:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD REWARD");
    Lists.setTokensList(t);   
    return new Symbol(sym.REWARD, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 86: break;
          case 35:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD ROUNDS");
    Lists.setTokensList(t);   
    return new Symbol(sym.ROUNDS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 87: break;
          case 36:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD INITIAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.INITIAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 88: break;
          case 37:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD PLAYERS");
    Lists.setTokensList(t);   
    return new Symbol(sym.PLAYERS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 89: break;
          case 38:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD SCORING");
    Lists.setTokensList(t);   
    return new Symbol(sym.SCORING, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 90: break;
          case 39:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD BETRAYAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.BETRAYAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 91: break;
          case 40:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GET_MOVE");
    Lists.setTokensList(t);   
    return new Symbol(sym.GET_MOVE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 92: break;
          case 41:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD STRATEGY");
    Lists.setTokensList(t);   
    return new Symbol(sym.STRAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 93: break;
          case 42:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD DEFECTION");
    Lists.setTokensList(t);   
    return new Symbol(sym.DEFECTION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 94: break;
          case 43:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "LAST_MOVE");
    Lists.setTokensList(t);   
    return new Symbol(sym.LAST_MOVE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 95: break;
          case 44:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD PUNISHMENT");
    Lists.setTokensList(t);   
    return new Symbol(sym.PUNISHMENT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 96: break;
          case 45:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD STRATEGIES");
    Lists.setTokensList(t);   
    return new Symbol(sym.STRATS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 97: break;
          case 46:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD COOPERATION");
    Lists.setTokensList(t);   
    return new Symbol(sym.COOPERATION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 98: break;
          case 47:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "ROUND_NUMBER");
    Lists.setTokensList(t);   
    return new Symbol(sym.ROUND_NUMBER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 99: break;
          case 48:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "SELF_HISTORY");
    Lists.setTokensList(t);   
    return new Symbol(sym.SELF_HISTORY, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 100: break;
          case 49:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "TOTAL_ROUNDS");
    Lists.setTokensList(t);   
    return new Symbol(sym.TOTAL_ROUNDS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 101: break;
          case 50:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GET_MOVES_COUNT");
    Lists.setTokensList(t);   
    return new Symbol(sym.GET_MOVES_COUNT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 102: break;
          case 51:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GET_LAST_N_MOVES");
    Lists.setTokensList(t);   
    return new Symbol(sym.GET_LAST_N_MOVES, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 103: break;
          case 52:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPPONENT_HISTORY");
    Lists.setTokensList(t);   
    return new Symbol(sym.OPPONENT_HISTORY, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

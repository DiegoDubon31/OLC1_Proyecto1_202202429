// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analyzer/Lexer.jflex

package Analyzer;
import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\1\1\4"+
    "\1\0\1\5\2\0\1\6\5\0\1\7\1\0\1\10"+
    "\1\0\12\11\1\12\1\0\1\13\1\14\1\15\2\0"+
    "\2\16\1\17\1\20\26\16\1\21\1\0\1\22\1\0"+
    "\1\16\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\16\1\34\1\35\1\36\1\37"+
    "\1\40\1\16\1\41\1\42\1\43\1\44\1\16\1\45"+
    "\1\16\1\46\1\16\1\47\1\50\1\51\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\1\1\4\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\14\11\1\16\1\1\1\17\1\20\1\21\2\0"+
    "\1\22\1\23\1\24\5\11\1\25\16\11\1\26\1\27"+
    "\1\0\16\11\1\30\6\11\1\2\3\11\1\31\2\11"+
    "\1\32\10\11\1\33\1\11\1\34\1\35\1\36\3\11"+
    "\1\37\1\11\1\40\5\11\1\41\6\11\1\42\2\11"+
    "\1\43\1\44\5\11\1\45\1\46\1\11\1\47\1\11"+
    "\1\50\4\11\1\51\1\11\1\52\3\11\1\53\1\54"+
    "\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\52\0\374"+
    "\0\52\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01a4\0\u01a4\0\52"+
    "\0\52\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca"+
    "\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\52\0\u03c6\0\52"+
    "\0\52\0\52\0\u03f0\0\u041a\0\52\0\52\0\52\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u01a4\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u070e\0\u0738\0\52\0\u03f0\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u01a4\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\52\0\u0ad4\0\u0afe\0\u0b28\0\u01a4"+
    "\0\u0b52\0\u0b7c\0\u01a4\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e"+
    "\0\u0c78\0\u0ca2\0\u0ccc\0\u01a4\0\u0cf6\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u01a4\0\u0d9e\0\u01a4\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u01a4\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18"+
    "\0\u0f42\0\u0f6c\0\u01a4\0\u0f96\0\u0fc0\0\u01a4\0\u01a4\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u01a4\0\u01a4\0\u10bc\0\u01a4"+
    "\0\u10e6\0\u01a4\0\u1110\0\u113a\0\u1164\0\u118e\0\u01a4\0\u11b8"+
    "\0\u01a4\0\u11e2\0\u120c\0\u1236\0\u01a4\0\u01a4\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\15\1\22\1\23\1\24\1\25\1\26"+
    "\2\15\1\27\1\15\1\30\2\15\1\31\1\32\1\33"+
    "\1\34\1\15\1\35\1\15\1\36\1\37\1\40\53\0"+
    "\2\3\63\0\1\41\35\0\2\5\1\0\47\5\6\0"+
    "\1\42\53\0\1\43\1\10\4\0\3\15\2\0\24\15"+
    "\7\0\1\44\7\0\1\45\51\0\1\46\51\0\1\47"+
    "\46\0\1\15\4\0\3\15\2\0\24\15\14\0\1\15"+
    "\4\0\3\15\2\0\4\15\1\50\17\15\14\0\1\15"+
    "\4\0\3\15\2\0\14\15\1\51\7\15\14\0\1\15"+
    "\4\0\3\15\2\0\4\15\1\52\17\15\14\0\1\15"+
    "\4\0\3\15\2\0\11\15\1\53\12\15\14\0\1\15"+
    "\4\0\3\15\2\0\1\54\23\15\14\0\1\15\4\0"+
    "\3\15\2\0\5\15\1\55\5\15\1\56\10\15\14\0"+
    "\1\15\4\0\3\15\2\0\1\57\20\15\1\60\2\15"+
    "\14\0\1\15\4\0\3\15\2\0\11\15\1\61\7\15"+
    "\1\62\2\15\14\0\1\15\4\0\3\15\2\0\4\15"+
    "\1\63\7\15\1\64\4\15\1\65\2\15\14\0\1\15"+
    "\4\0\3\15\2\0\2\15\1\66\1\15\1\67\13\15"+
    "\1\70\3\15\14\0\1\15\4\0\3\15\2\0\7\15"+
    "\1\71\6\15\1\72\5\15\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\73\13\15\53\0\1\74\12\0\1\75"+
    "\40\0\4\44\1\76\45\44\11\0\1\15\4\0\3\15"+
    "\2\0\20\15\1\77\3\15\14\0\1\15\4\0\3\15"+
    "\2\0\14\15\1\100\7\15\14\0\1\15\4\0\3\15"+
    "\2\0\5\15\1\101\16\15\14\0\1\15\4\0\3\15"+
    "\2\0\17\15\1\102\4\15\14\0\1\15\4\0\3\15"+
    "\2\0\11\15\1\103\12\15\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\104\13\15\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\105\7\15\1\106\3\15\14\0\1\15"+
    "\4\0\3\15\2\0\20\15\1\107\3\15\14\0\1\15"+
    "\4\0\3\15\2\0\1\110\23\15\14\0\1\15\4\0"+
    "\3\15\2\0\13\15\1\111\10\15\14\0\1\15\4\0"+
    "\3\15\2\0\22\15\1\112\1\15\14\0\1\15\4\0"+
    "\3\15\2\0\21\15\1\113\2\15\14\0\1\15\4\0"+
    "\3\15\2\0\11\15\1\114\1\15\1\115\10\15\14\0"+
    "\1\15\4\0\3\15\2\0\14\15\1\116\7\15\14\0"+
    "\1\15\4\0\3\15\2\0\4\15\1\117\17\15\14\0"+
    "\1\15\4\0\3\15\2\0\16\15\1\120\5\15\14\0"+
    "\1\15\4\0\3\15\2\0\4\15\1\121\17\15\14\0"+
    "\1\15\4\0\3\15\2\0\21\15\1\122\2\15\14\0"+
    "\1\15\4\0\3\15\2\0\20\15\1\123\3\15\3\0"+
    "\4\44\1\76\10\44\1\124\34\44\11\0\1\15\4\0"+
    "\3\15\2\0\16\15\1\125\5\15\14\0\1\15\4\0"+
    "\3\15\2\0\15\15\1\126\6\15\14\0\1\15\4\0"+
    "\3\15\2\0\4\15\1\127\17\15\14\0\1\15\4\0"+
    "\3\15\2\0\4\15\1\130\17\15\14\0\1\15\4\0"+
    "\3\15\2\0\17\15\1\131\4\15\14\0\1\15\4\0"+
    "\3\15\2\0\20\15\1\132\3\15\14\0\1\15\4\0"+
    "\3\15\2\0\13\15\1\133\10\15\14\0\1\15\4\0"+
    "\3\15\2\0\2\15\1\134\21\15\14\0\1\15\4\0"+
    "\3\15\2\0\21\15\1\135\2\15\14\0\1\15\4\0"+
    "\3\15\2\0\23\15\1\136\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\137\13\15\14\0\1\15\4\0\3\15"+
    "\2\0\1\140\23\15\14\0\1\15\4\0\3\15\2\0"+
    "\13\15\1\141\10\15\14\0\1\15\4\0\3\15\2\0"+
    "\4\15\1\142\17\15\14\0\1\15\4\0\3\15\2\0"+
    "\16\15\1\143\5\15\14\0\1\15\4\0\3\15\2\0"+
    "\3\15\1\144\20\15\14\0\1\15\4\0\3\15\2\0"+
    "\1\145\23\15\14\0\1\15\4\0\3\15\2\0\13\15"+
    "\1\146\10\15\14\0\1\15\4\0\3\15\2\0\4\15"+
    "\1\147\17\15\14\0\1\15\4\0\3\15\2\0\7\15"+
    "\1\150\14\15\14\0\1\15\4\0\3\15\2\0\1\151"+
    "\23\15\14\0\1\15\4\0\3\15\2\0\4\15\1\152"+
    "\17\15\14\0\1\15\4\0\3\15\2\0\2\15\1\153"+
    "\21\15\14\0\1\15\4\0\3\15\2\0\4\15\1\154"+
    "\17\15\14\0\1\15\4\0\3\15\2\0\10\15\1\155"+
    "\13\15\14\0\1\15\4\0\3\15\2\0\7\15\1\156"+
    "\14\15\14\0\1\15\4\0\3\15\2\0\1\157\23\15"+
    "\14\0\1\15\4\0\3\15\2\0\4\15\1\160\17\15"+
    "\14\0\1\15\4\0\3\15\2\0\17\15\1\161\4\15"+
    "\14\0\1\15\4\0\3\15\2\0\16\15\1\162\5\15"+
    "\14\0\1\15\4\0\3\15\2\0\3\15\1\163\20\15"+
    "\14\0\1\15\4\0\3\15\2\0\17\15\1\164\4\15"+
    "\14\0\1\15\4\0\3\15\2\0\10\15\1\165\13\15"+
    "\14\0\1\15\4\0\3\15\2\0\20\15\1\166\3\15"+
    "\14\0\1\15\4\0\3\15\2\0\23\15\1\167\14\0"+
    "\1\15\4\0\3\15\2\0\16\15\1\170\5\15\14\0"+
    "\1\15\4\0\3\15\2\0\20\15\1\171\3\15\14\0"+
    "\1\15\4\0\3\15\2\0\1\172\23\15\14\0\1\15"+
    "\4\0\3\15\2\0\11\15\1\173\12\15\14\0\1\15"+
    "\4\0\3\15\2\0\16\15\1\174\5\15\14\0\1\15"+
    "\4\0\3\15\2\0\7\15\1\175\14\15\14\0\1\15"+
    "\4\0\3\15\2\0\3\15\1\176\20\15\14\0\1\15"+
    "\4\0\3\15\2\0\17\15\1\177\4\15\14\0\1\15"+
    "\4\0\3\15\2\0\13\15\1\200\10\15\14\0\1\15"+
    "\4\0\3\15\2\0\4\15\1\201\17\15\14\0\1\15"+
    "\4\0\3\15\2\0\1\202\23\15\14\0\1\15\4\0"+
    "\3\15\2\0\1\203\23\15\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\204\13\15\14\0\1\15\4\0\3\15"+
    "\2\0\11\15\1\205\12\15\14\0\1\15\4\0\3\15"+
    "\2\0\17\15\1\206\4\15\14\0\1\15\4\0\3\15"+
    "\2\0\12\15\1\207\11\15\14\0\1\15\4\0\3\15"+
    "\2\0\6\15\1\210\15\15\14\0\1\15\4\0\3\15"+
    "\2\0\6\15\1\211\15\15\14\0\1\15\4\0\3\15"+
    "\2\0\11\15\1\212\12\15\14\0\1\15\4\0\3\15"+
    "\2\0\20\15\1\213\3\15\14\0\1\15\4\0\3\15"+
    "\2\0\14\15\1\214\7\15\14\0\1\15\4\0\3\15"+
    "\2\0\4\15\1\215\17\15\14\0\1\15\4\0\3\15"+
    "\2\0\10\15\1\216\12\15\1\217\14\0\1\15\4\0"+
    "\3\15\2\0\10\15\1\220\13\15\14\0\1\15\4\0"+
    "\3\15\2\0\13\15\1\221\10\15\14\0\1\15\4\0"+
    "\3\15\2\0\13\15\1\222\10\15\14\0\1\15\4\0"+
    "\3\15\2\0\4\15\1\223\17\15\14\0\1\15\4\0"+
    "\3\15\2\0\14\15\1\224\7\15\14\0\1\15\4\0"+
    "\3\15\2\0\20\15\1\225\3\15\14\0\1\15\4\0"+
    "\3\15\2\0\17\15\1\226\4\15\14\0\1\15\4\0"+
    "\3\15\2\0\13\15\1\227\10\15\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4704];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\6\1\2\11"+
    "\14\1\1\11\1\1\3\11\2\0\3\11\24\1\1\11"+
    "\1\1\1\0\25\1\1\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error e = new error("El caracter "+yytext()+" no pertenece al lenguaje", "Lexico", String.valueOf(yyline+1), String.valueOf(yycolumn+1));
                Lists.setErrorsList(e);
                String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline + 1)+" y columna: "+(yycolumn + 1);
                System.out.println(errLex);
            }
          // fall through
          case 46: break;
          case 2:
            { 
            }
          // fall through
          case 47: break;
          case 3:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "NOT");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_NOT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 48: break;
          case 4:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "COMMA");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_COMMA, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 49: break;
          case 5:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "INTEGER");
    Lists.setTokensList(t);   
    return new Symbol(sym.INTEGER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 50: break;
          case 6:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "COLON");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_COLON, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 51: break;
          case 7:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "LOWER THAN");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_LOWER_THAN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 52: break;
          case 8:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GREATER THAN");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_GREATER_THAN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 53: break;
          case 9:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "ID");
    Lists.setTokensList(t);   
    return new Symbol(sym.ID, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 54: break;
          case 10:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "COOPERATE ACTION");
    Lists.setTokensList(t);   
    return new Symbol(sym.A_COOPERATE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 55: break;
          case 11:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "DEFECT ACTION");
    Lists.setTokensList(t);   
    return new Symbol(sym.A_DEFECT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 56: break;
          case 12:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPEN SQUARE BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_SQUAREOPEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 57: break;
          case 13:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "CLOSE SQUARE BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_SQUARECLOSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 58: break;
          case 14:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OPEN CURLY BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_CURLYOPEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 59: break;
          case 15:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "CLOSE CURLY BRACE");
    Lists.setTokensList(t);   
    return new Symbol(sym.S_CURLYCLOSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 60: break;
          case 16:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "INEQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_INEQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 61: break;
          case 17:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "AND");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_AND, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 62: break;
          case 18:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "LOWER OR EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_LOWER_OR_EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 63: break;
          case 19:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 64: break;
          case 20:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "GREATER OR EQUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_GREATER_OR_EQUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 65: break;
          case 21:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD IF");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_IF, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 66: break;
          case 22:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "OR");
    Lists.setTokensList(t);   
    return new Symbol(sym.O_OR, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 67: break;
          case 23:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "FLOAT");
    Lists.setTokensList(t);   
    return new Symbol(sym.FLOAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 68: break;
          case 24:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD RUN");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_RUN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 69: break;
          case 25:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD ELSE");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_ELSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 70: break;
          case 26:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MAIN");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_MAIN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 71: break;
          case 27:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD SEED");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_SEED, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 72: break;
          case 28:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD THEN");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_THEN, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 73: break;
          case 29:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD TRUE");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_TRUE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 74: break;
          case 30:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD WITH");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_WITH, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 75: break;
          case 31:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD FALSE");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_FALSE, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 76: break;
          case 32:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MATCH");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_MATCH, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 77: break;
          case 33:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD RULES");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_RULES, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 78: break;
          case 34:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD MUTUAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_MUTUAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 79: break;
          case 35:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD REWARD");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_REWARD, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 80: break;
          case 36:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD ROUNDS");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_ROUNDS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 81: break;
          case 37:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD INITIAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_INITIAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 82: break;
          case 38:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD PLAYERS");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_PLAYERS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 83: break;
          case 39:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD SCORING");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_SCORING, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 84: break;
          case 40:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD BETRAYAL");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_BETRAYAL, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 85: break;
          case 41:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD STRATEGY");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_STRAT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 86: break;
          case 42:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD DEFECTION");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_DEFECTION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 87: break;
          case 43:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD PUNISHMENT");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_PUNISHMENT, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 88: break;
          case 44:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD STRATEGIES");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_STRATS, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 89: break;
          case 45:
            { Token t = new Token(yytext(),String.valueOf(yyline+1), String.valueOf(yycolumn+1) , "RESERVED WORD COOPERATION");
    Lists.setTokensList(t);   
    return new Symbol(sym.R_COOPERATION, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

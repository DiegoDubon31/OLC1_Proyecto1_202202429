
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzer;

import AST.IAST;
import AST.Main.MainStmt;
import AST.Main.RunStmt;
import AST.Match.MatchStmt;
import AST.Strategy.Strategy;
import AST.Strategy.IfStmt;
import AST.Strategy.BoolExpr;
import AST.Strategy.BoolCond;
import AST.Random.Srandom;
import AST.States.Sround_number;
import AST.States.Stotal_rounds;
import AST.Functions.Fget_move;
import AST.Functions.Flast_move;
import AST.Functions.Fget_last_n_moves;
import AST.Functions.Fget_moves_count;
import AST.Literal.Literal;
import java.util.ArrayList;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\003\000\002\010\050\000\002\006\006" +
    "\000\002\003\004\000\002\003\003\000\002\005\014\000" +
    "\002\004\005\000\002\004\003\000\002\011\004\000\002" +
    "\011\003\000\002\012\016\000\002\013\004\000\002\013" +
    "\003\000\002\020\007\000\002\020\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\021\003\000\002\021" +
    "\010\000\002\021\006\000\002\027\003\000\002\027\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\017\010\000\002\017\006\000\002\017\010\000\002" +
    "\017\010\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\026\003\000\002\026\003\000\002\016" +
    "\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\004\006\001\002\000\006\004\ufff5\005" +
    "\ufff5\001\002\000\004\002\240\001\002\000\004\064\106" +
    "\001\002\000\006\004\006\005\012\001\002\000\006\005" +
    "\ufffe\006\ufffe\001\002\000\006\004\ufff6\005\ufff6\001\002" +
    "\000\004\064\041\001\002\000\006\005\012\006\016\001" +
    "\002\000\006\005\uffff\006\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\054\017\001\002\000\004\015\022\001" +
    "\002\000\006\015\ufffa\055\ufffa\001\002\000\006\015\022" +
    "\055\040\001\002\000\004\056\023\001\002\000\004\064" +
    "\025\001\002\000\006\057\027\061\026\001\002\000\006" +
    "\057\ufff7\061\ufff7\001\002\000\004\064\036\001\002\000" +
    "\004\016\030\001\002\000\004\054\031\001\002\000\004" +
    "\017\032\001\002\000\004\060\033\001\002\000\004\065" +
    "\034\001\002\000\004\055\035\001\002\000\006\015\ufff9" +
    "\055\ufff9\001\002\000\006\057\ufff8\061\ufff8\001\002\000" +
    "\006\015\ufffb\055\ufffb\001\002\000\004\002\ufffc\001\002" +
    "\000\004\054\042\001\002\000\004\020\043\001\002\000" +
    "\004\021\044\001\002\000\004\060\045\001\002\000\004" +
    "\056\046\001\002\000\004\064\047\001\002\000\004\061" +
    "\050\001\002\000\004\064\051\001\002\000\004\057\052" +
    "\001\002\000\004\022\053\001\002\000\004\060\054\001" +
    "\002\000\004\065\055\001\002\000\004\014\056\001\002" +
    "\000\004\060\057\001\002\000\004\054\060\001\002\000" +
    "\004\023\061\001\002\000\004\024\062\001\002\000\004" +
    "\060\063\001\002\000\004\065\064\001\002\000\004\061" +
    "\065\001\002\000\004\023\066\001\002\000\004\025\067" +
    "\001\002\000\004\060\070\001\002\000\004\065\071\001" +
    "\002\000\004\061\072\001\002\000\004\026\073\001\002" +
    "\000\004\027\074\001\002\000\004\060\075\001\002\000" +
    "\004\065\076\001\002\000\004\061\077\001\002\000\004" +
    "\026\100\001\002\000\004\030\101\001\002\000\004\060" +
    "\102\001\002\000\004\065\103\001\002\000\004\055\104" +
    "\001\002\000\004\055\105\001\002\000\006\005\ufffd\006" +
    "\ufffd\001\002\000\004\054\107\001\002\000\004\007\110" +
    "\001\002\000\004\060\111\001\002\000\004\062\112\001" +
    "\002\000\004\010\113\001\002\000\004\060\114\001\002" +
    "\000\004\056\115\001\002\000\006\011\121\013\116\001" +
    "\002\000\010\041\211\042\213\062\212\001\002\000\010" +
    "\011\ufff2\013\ufff2\057\ufff2\001\002\000\010\011\121\013" +
    "\116\057\234\001\002\000\030\041\130\042\136\043\135" +
    "\044\122\045\141\050\134\051\126\056\133\062\132\063" +
    "\140\065\125\001\002\000\004\037\227\001\002\000\010" +
    "\012\206\031\207\032\210\001\002\000\024\012\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\052\uffeb" +
    "\053\uffeb\001\002\000\024\012\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\052\uffe8\053\uffe8\001\002" +
    "\000\030\012\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\040\uffdf\052\uffdf\053\uffdf\061\uffdf\001\002" +
    "\000\024\012\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\052\uffec\053\uffec\001\002\000\004\037\200" +
    "\001\002\000\016\033\175\034\171\035\173\036\174\052" +
    "\172\053\170\001\002\000\024\012\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\052\uffea\053\uffea\001" +
    "\002\000\004\062\163\001\002\000\030\012\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\052" +
    "\uffe0\053\uffe0\061\uffe0\001\002\000\004\037\152\001\002" +
    "\000\004\037\142\001\002\000\010\012\uffee\031\uffee\032" +
    "\uffee\001\002\000\024\012\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\052\uffe7\053\uffe7\001\002\000" +
    "\030\012\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\040\uffe1\052\uffe1\053\uffe1\061\uffe1\001\002\000" +
    "\024\041\130\042\136\043\135\044\122\045\141\046\147" +
    "\047\150\050\134\051\126\001\002\000\006\040\uffd8\061" +
    "\uffd8\001\002\000\006\040\uffd9\061\uffd9\001\002\000\004" +
    "\040\151\001\002\000\006\040\uffda\061\uffda\001\002\000" +
    "\006\040\uffcd\061\uffcd\001\002\000\006\040\uffcc\061\uffcc" +
    "\001\002\000\030\012\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\040\uffdd\052\uffdd\053\uffdd\061\uffdd" +
    "\001\002\000\024\041\130\042\136\043\135\044\122\045" +
    "\141\046\147\047\150\050\134\051\126\001\002\000\004" +
    "\061\154\001\002\000\024\041\130\042\136\043\135\044" +
    "\122\045\141\050\134\051\126\062\161\065\156\001\002" +
    "\000\004\040\uffd4\001\002\000\004\040\uffd7\001\002\000" +
    "\004\040\uffd5\001\002\000\004\040\162\001\002\000\004" +
    "\040\uffd6\001\002\000\030\012\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\052\uffdc\053\uffdc" +
    "\061\uffdc\001\002\000\006\057\uffca\061\uffca\001\002\000" +
    "\006\057\166\061\165\001\002\000\004\062\167\001\002" +
    "\000\024\012\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\052\uffe9\053\uffe9\001\002\000\006\057\uffcb" +
    "\061\uffcb\001\002\000\030\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\050\uffcf\051\uffcf\056\uffcf\062\uffcf\063\uffcf" +
    "\065\uffcf\001\002\000\030\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\050\uffd2\051\uffd2\056\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\001\002\000\030\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\050\uffce\051\uffce\056\uffce\062\uffce\063\uffce" +
    "\065\uffce\001\002\000\030\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\050\uffd0\051\uffd0\056\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\001\002\000\030\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\050\uffd1\051\uffd1\056\uffd1\062\uffd1\063\uffd1" +
    "\065\uffd1\001\002\000\030\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\050\uffd3\051\uffd3\056\uffd3\062\uffd3\063\uffd3" +
    "\065\uffd3\001\002\000\030\041\130\042\136\043\135\044" +
    "\122\045\141\050\134\051\126\056\133\062\132\063\140" +
    "\065\125\001\002\000\010\012\uffed\031\uffed\032\uffed\001" +
    "\002\000\024\041\130\042\136\043\135\044\122\045\141" +
    "\046\147\047\150\050\134\051\126\001\002\000\004\061" +
    "\202\001\002\000\024\041\130\042\136\043\135\044\122" +
    "\045\141\050\134\051\126\062\161\065\156\001\002\000" +
    "\004\040\204\001\002\000\030\012\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\052\uffde\053" +
    "\uffde\061\uffde\001\002\000\030\041\130\042\136\043\135" +
    "\044\122\045\141\050\134\051\126\056\133\062\132\063" +
    "\140\065\125\001\002\000\010\041\211\042\213\062\212" +
    "\001\002\000\030\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\050\uffe3\051\uffe3\056\uffe3\062\uffe3\063\uffe3\065\uffe3" +
    "\001\002\000\030\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\050\uffe2\051\uffe2\056\uffe2\062\uffe2\063\uffe2\065\uffe2" +
    "\001\002\000\004\037\221\001\002\000\012\011\uffe6\013" +
    "\uffe6\057\uffe6\061\uffe6\001\002\000\004\037\216\001\002" +
    "\000\004\061\215\001\002\000\010\011\ufff1\013\ufff1\057" +
    "\ufff1\001\002\000\024\041\130\042\136\043\135\044\122" +
    "\045\141\046\147\047\150\050\134\051\126\001\002\000" +
    "\004\040\220\001\002\000\012\011\uffe4\013\uffe4\057\uffe4" +
    "\061\uffe4\001\002\000\024\041\130\042\136\043\135\044" +
    "\122\045\141\046\147\047\150\050\134\051\126\001\002" +
    "\000\004\061\223\001\002\000\024\041\130\042\136\043" +
    "\135\044\122\045\141\050\134\051\126\062\161\065\156" +
    "\001\002\000\004\040\225\001\002\000\012\011\uffe5\013" +
    "\uffe5\057\uffe5\061\uffe5\001\002\000\010\012\uffef\031\207" +
    "\032\210\001\002\000\024\041\130\042\136\043\135\044" +
    "\122\045\141\046\147\047\150\050\134\051\126\001\002" +
    "\000\004\061\231\001\002\000\024\041\130\042\136\043" +
    "\135\044\122\045\141\050\134\051\126\062\161\065\156" +
    "\001\002\000\004\040\233\001\002\000\030\012\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb" +
    "\052\uffdb\053\uffdb\061\uffdb\001\002\000\004\055\236\001" +
    "\002\000\010\011\ufff3\013\ufff3\057\ufff3\001\002\000\006" +
    "\004\ufff4\005\ufff4\001\002\000\010\011\ufff0\013\ufff0\057" +
    "\ufff0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\010\002\004\011\006\012\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\012\010\007\012\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\014\010\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\020\005\017\001\001\000\002\001\001" +
    "\000\004\005\036\001\001\000\002\001\001\000\004\004" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\117\020\116\001\001\000\004\021\236\001\001\000\002" +
    "\001\001\000\004\020\234\001\001\000\014\014\122\015" +
    "\136\017\126\022\130\023\123\001\001\000\002\001\001" +
    "\000\004\027\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\175\001\001\000\002\001\001\000\004\016" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\143\023\142\024\144\026\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\143\023\142\024\152\026\145\001" +
    "\001\000\002\001\001\000\010\017\156\023\154\025\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\126\022\176\023\123" +
    "\001\001\000\002\001\001\000\012\017\143\023\142\024" +
    "\200\026\145\001\001\000\002\001\001\000\010\017\156" +
    "\023\154\025\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\225\015\136\017\126\022\130\023\123" +
    "\001\001\000\004\021\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\143\023\142\024\216\026\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\143\023\142\024\221\026" +
    "\145\001\001\000\002\001\001\000\010\017\156\023\154" +
    "\025\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\204\001\001\000\012\017\143\023\142\024\227" +
    "\026\145\001\001\000\002\001\001\000\010\017\156\023" +
    "\154\025\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<IAST> AST = new ArrayList<>();
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= strategy matches mainStmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Strategy> s = (ArrayList<Strategy>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<MatchStmt> ma = (ArrayList<MatchStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainStmt b = (MainStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		for (Strategy st : s) {
                                            parser.AST.add(st);
                                        }
                                        for (MatchStmt m : ma) {
                                            parser.AST.add(m);
                                        }
                                        parser.AST.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // matches ::= matches matchStmt 
            {
              ArrayList<MatchStmt> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<MatchStmt> m = (ArrayList<MatchStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MatchStmt ms = (MatchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = m; RESULT.add(ms);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matches",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // matches ::= matchStmt 
            {
              ArrayList<MatchStmt> RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MatchStmt ms = (MatchStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<MatchStmt>(); RESULT.add(ms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matches",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // matchStmt ::= MATCH ID CURLYOPEN PLAYERS STRATS COLON SQUAREOPEN ID COMMA ID SQUARECLOSE ROUNDS COLON INTEGER SCORING COLON CURLYOPEN MUTUAL COOPERATION COLON INTEGER COMMA MUTUAL DEFECTION COLON INTEGER COMMA BETRAYAL REWARD COLON INTEGER COMMA BETRAYAL PUNISHMENT COLON INTEGER CURLYCLOSE CURLYCLOSE 
            {
              MatchStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-36)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MatchStmt(id.toString(), id1.toString(), id2.toString(), Integer.parseInt(in.toString()));
                            RESULT.setScoring("mutual cooperation",Integer.parseInt(i.toString()));
                            RESULT.setScoring("mutual defection",Integer.parseInt(i1.toString()));
                            RESULT.setScoring("betrayal reward",Integer.parseInt(i2.toString()));
                            RESULT.setScoring("betrayal punishment",Integer.parseInt(i3.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matchStmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-37)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainStmt ::= MAIN CURLYOPEN runLst CURLYCLOSE 
            {
              MainStmt RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<RunStmt> m = (ArrayList<RunStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MainStmt(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // runLst ::= runLst runStmt 
            {
              ArrayList<RunStmt> RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<RunStmt> rl = (ArrayList<RunStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RunStmt r = (RunStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rl; RESULT.add(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("runLst",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // runLst ::= runStmt 
            {
              ArrayList<RunStmt> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RunStmt r = (RunStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<RunStmt>(); RESULT.add(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("runLst",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // runStmt ::= RUN SQUAREOPEN matchesIds SQUARECLOSE WITH CURLYOPEN SEED COLON INTEGER CURLYCLOSE 
            {
              RunStmt RESULT =null;
		int Idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<String> Ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RunStmt(Ids, Integer.parseInt(s.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("runStmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // matchesIds ::= matchesIds COMMA ID 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> i = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i; RESULT.add(i1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matchesIds",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // matchesIds ::= ID 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(i.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matchesIds",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // strategy ::= strategy stratStmt 
            {
              ArrayList<Strategy> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Strategy> str = (ArrayList<Strategy>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Strategy s = (Strategy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = str; RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strategy",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // strategy ::= stratStmt 
            {
              ArrayList<Strategy> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Strategy s = (Strategy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<Strategy>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strategy",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stratStmt ::= STRAT ID CURLYOPEN INITIAL COLON DECISION RULES COLON SQUAREOPEN conditions SQUARECLOSE CURLYCLOSE 
            {
              Strategy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IAST> c = (ArrayList<IAST>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Strategy(id.toString(), d.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stratStmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conditions ::= conditions ifStmt 
            {
              ArrayList<IAST> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IAST> cs = (ArrayList<IAST>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST c = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cs; RESULT.add(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditions ::= ifStmt 
            {
              ArrayList<IAST> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST c = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<IAST>(); RESULT.add(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifStmt ::= IF booleanExpression THEN actions COMMA 
            {
              IAST RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BoolExpr bc = (BoolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST d = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IfStmt(bc, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifStmt ::= ELSE actions 
            {
              IAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST e = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // booleanExpression ::= booleanExpression logical booleanExpression 
            {
              BoolExpr RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BoolExpr bs = (BoolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BoolExpr(bs, l, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // booleanExpression ::= booleanCondition 
            {
              BoolExpr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BoolCond b = (BoolCond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BoolExpr(b,null, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanExpression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // booleanCondition ::= side comparison side 
            {
              BoolCond RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IAST s1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST s3 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BoolCond(s1,s2, s3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanCondition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // side ::= func 
            {
              IAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST f = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // side ::= state 
            {
              IAST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST s = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // side ::= DECISION 
            {
              IAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal<>(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // side ::= SQUAREOPEN decisionList SQUARECLOSE 
            {
              IAST RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> dl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Literal<>(dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // side ::= INTEGER 
            {
              IAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal<>(Integer.parseInt(f.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // side ::= FLOAT 
            {
              IAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal<>(Double.parseDouble(f.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("side",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // actions ::= DECISION 
            {
              IAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Literal<>(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // actions ::= GET_MOVE ROUNDOPEN arg1 COMMA arg2 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a2 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Fget_move(a1, a2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // actions ::= LAST_MOVE ROUNDOPEN arg1 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Flast_move(a1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical ::= AND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical ::= OR 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // state ::= ROUND_NUMBER 
            {
              IAST RESULT =null;
		 RESULT = new Sround_number(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // state ::= TOTAL_ROUNDS 
            {
              IAST RESULT =null;
		 RESULT = new Stotal_rounds(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // state ::= RANDOM 
            {
              IAST RESULT =null;
		 RESULT = new Srandom(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func ::= GET_MOVE ROUNDOPEN arg1 COMMA arg2 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a2 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Fget_move(a1, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // func ::= LAST_MOVE ROUNDOPEN arg1 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Flast_move(a1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func ::= GET_MOVES_COUNT ROUNDOPEN arg1 COMMA arg2 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a2 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Fget_moves_count(a1, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // func ::= GET_LAST_N_MOVES ROUNDOPEN arg1 COMMA arg2 ROUNDCLOSE 
            {
              IAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		IAST a1 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IAST a2 = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Fget_last_n_moves(a1, a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arg1 ::= history 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST h = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arg1 ::= func 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST h = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arg1 ::= state 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST h = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arg2 ::= INTEGER 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal<>(Integer.parseInt(h.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arg2 ::= DECISION 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal<>(h.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arg2 ::= func 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST h = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arg2 ::= state 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IAST h = (IAST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparison ::= EQUAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparison ::= INEQUAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparison ::= LOWER_THAN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparison ::= GREATER_THAN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparison ::= LOWER_OR_EQUAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparison ::= GREATER_OR_EQUAL 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // history ::= OPPONENT_HISTORY 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal<>("opponent_history"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("history",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // history ::= SELF_HISTORY 
            {
              IAST RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal<>("self_history"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("history",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decisionList ::= decisionList COMMA DECISION 
            {
              ArrayList<String> RESULT =null;
		int d0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int d0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> d0 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d0; RESULT.add(d.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisionList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decisionList ::= DECISION 
            {
              ArrayList<String> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(d.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisionList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

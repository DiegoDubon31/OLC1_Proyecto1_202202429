/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import AST.Interpreter.IAST;
import Analyzer.Lexer;
import Analyzer.Lists;
import Analyzer.Parser;
import Analyzer.error;
import AST.Interpreter.Context;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author diego
 */
public class Front extends javax.swing.JFrame {

      private String nombreArchivo;
      
      private File currentFile = null;
      
      
    /**
     * Creates new form InterfaceAnalizador
     */
    public Front() {
        initComponents();
        setTitle("Prisoner's Dilemma");
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Define la acci√≥n al cerrar
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        setResizable(false);
        reiniciarCarpetas();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ConsolaTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AnalizarArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        NuevoArchivoOp = new javax.swing.JMenuItem();
        GuardarArchivoOp = new javax.swing.JMenuItem();
        GuardarComoArchivoOp = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        ConsolaTextArea.setEditable(false);
        ConsolaTextArea.setBackground(new java.awt.Color(153, 153, 153));
        ConsolaTextArea.setColumns(20);
        ConsolaTextArea.setRows(5);
        jScrollPane1.setViewportView(ConsolaTextArea);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("CONSOLE");

        jButton3.setText("Clean Console");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        AnalizarArea.setColumns(20);
        AnalizarArea.setRows(5);
        jScrollPane3.setViewportView(AnalizarArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        jMenuBar1.setBackground(new java.awt.Color(51, 51, 51));
        jMenuBar1.setForeground(new java.awt.Color(204, 204, 204));

        jMenu2.setText("File");

        NuevoArchivoOp.setText("New");
        NuevoArchivoOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoArchivoOpActionPerformed(evt);
            }
        });
        jMenu2.add(NuevoArchivoOp);

        GuardarArchivoOp.setText("Save");
        GuardarArchivoOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarArchivoOpActionPerformed(evt);
            }
        });
        jMenu2.add(GuardarArchivoOp);

        GuardarComoArchivoOp.setText("Open File...");
        GuardarComoArchivoOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarComoArchivoOpActionPerformed(evt);
            }
        });
        jMenu2.add(GuardarComoArchivoOp);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Execute");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });

        jMenuItem1.setText("Analyze");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Reports");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });

        jMenuItem2.setText("View");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GuardarArchivoOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarArchivoOpActionPerformed
        // TODO add your handling code here:
         
        try{
            guardarArchivo(AnalizarArea);
        }catch(Exception e){
            mensaje("No se selecciono ningun archivo");
        }
            
        
    }//GEN-LAST:event_GuardarArchivoOpActionPerformed
    private void guardarArchivo(JTextArea textArea) {
        if (currentFile != null) {
        // Si ya hay un archivo abierto, guarda directamente
        try (FileWriter fileWriter = new FileWriter(currentFile)) {
            fileWriter.write(textArea.getText());
            JOptionPane.showMessageDialog(null, "File successfully saved.", "Saved", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error saving file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Si no hay archivo actual, llama a Guardar Como
        guardarComo(textArea);
    }
    }

    
    

    private void NuevoArchivoOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoArchivoOpActionPerformed
        // TODO add your handling code here:
        
       nuevoArchivo(AnalizarArea);    
    }//GEN-LAST:event_NuevoArchivoOpActionPerformed
    private void nuevoArchivo(JTextArea txtarea) {
        txtarea.setText("");
        ConsolaTextArea.setText("");
        reiniciarCarpetas();
        currentFile =null;
    }
    // M√©todo para reiniciar las carpetas reportes e imagenes
    public static void reiniciarCarpetas() {
        // Define las rutas de las carpetas
        String reportesPath = "./reports";
        Lists.initLists();
        // Reinicia las carpetas
        eliminarCarpeta(new File(reportesPath));

        // Vuelve a crear las carpetas vac√≠as
        new File(reportesPath).mkdirs();

        System.out.println("Las carpetas 'reportes' e 'imagenes' se han reiniciado.");
    }

    // M√©todo para eliminar recursivamente el contenido de una carpeta
    private static void eliminarCarpeta(File carpeta) {
        if (carpeta.exists()) {
            File[] archivos = carpeta.listFiles();
            if (archivos != null) { // Si la carpeta tiene contenido
                for (File archivo : archivos) {
                    if (archivo.isDirectory()) {
                        eliminarCarpeta(archivo); // Elimina subcarpetas recursivamente
                    } else {
                        archivo.delete(); // Elimina archivos
                    }
                }
            }
            carpeta.delete(); // Finalmente, elimina la carpeta en s√≠
        }
    }
    private void GuardarComoArchivoOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarComoArchivoOpActionPerformed
        // TODO add your handling code here:
         abrirArchivoCMP();   
    }//GEN-LAST:event_GuardarComoArchivoOpActionPerformed
    private void abrirArchivoCMP() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select File .CMP");

        // Filtro para archivos .CMP
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos CMP (*.cmp)", "cmp");
        fileChooser.setFileFilter(filtro);

        int seleccion = fileChooser.showOpenDialog(this); // Mostrar el di√°logo de apertura

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile(); // Obtener el archivo seleccionado
            
            // Verificar que la extensi√≥n sea correcta
            if (!archivo.getName().toLowerCase().endsWith(".cmp")) {
                JOptionPane.showMessageDialog(this, "Error: Select a file .CMP valid.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                // Leer el contenido del archivo y mostrarlo en AnalizarArea
                String contenido = new String(Files.readAllBytes(archivo.toPath()), StandardCharsets.UTF_8);
                AnalizarArea.setText(contenido); // Mostrar en el JTextArea
                currentFile = archivo;

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }
    private void guardarComo(JTextArea textArea) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as");

        // Filtro para aceptar solo archivos .cmp
        fileChooser.setFileFilter(new FileNameExtensionFilter("Files cmp", "cmp"));

        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();

            // Asegurarse de que el archivo tenga la extensi√≥n .ca
            if (!currentFile.getName().endsWith(".cmp")) {
                currentFile = new File(currentFile.getAbsolutePath() + ".cmp");
            }

            try (FileWriter fileWriter = new FileWriter(currentFile)) {
                fileWriter.write(textArea.getText());
                JOptionPane.showMessageDialog(null, "File successfully saved.", "Saved", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error saving file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        //JTextArea entrada = obtenerTextAreaDePestanaActual();
        //ejecutar(entrada.getText());
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.ConsolaTextArea.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        Lists.generarTablaHTMLErrores();
        Lists.generarTablaHTMLTokens();
        
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        reiniciarCarpetas();
        String texto = AnalizarArea.getText();
        
        Lexer scanner = new Lexer(new StringReader(texto)); 
        Parser sintax = new Parser(scanner);
        
        try {
            sintax.parse();
            ArrayList<IAST> AST = sintax.AST;
            Context context = new Context();
            for (IAST iast : AST) {
                iast.interpret(context);
            }
            String current="";
            if (!Lists.getErrorsList().isEmpty()) {
                for (error e : Lists.getErrorsList()) {
                    String errLex = "Error: "+"Type: "+e.getType()+": "+e.getLexeme()+" in line: "+e.getRow()+" and column: "+e.getColumn()+"\n";
                    ConsolaTextArea.setText(current+=errLex);
                }
            }
            current += context.getOut();
            ConsolaTextArea.setText(current);
            Lists.generarTablaHTMLErrores();
            Lists.generarTablaHTMLTokens();
        } catch (Exception ex) {
            Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        abrirReportes();
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void abrirReportes(){
        try {
            // Verificar si Desktop es soportado por el sistema
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(this, "El escritorio no es soportado en este sistema.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Desktop desktop = Desktop.getDesktop();

            // Rutas de los archivos de reportes
            File tokensFile = new File("reports/Tokens.html");
            File errorsFile = new File("reports/Errors.html");

            // Verificar si los archivos existen antes de abrirlos
            if (!tokensFile.exists() || !errorsFile.exists()) {
                JOptionPane.showMessageDialog(this, "Uno o ambos archivos de reportes no existen.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Abrir los archivos en el navegador predeterminado
            desktop.browse(tokensFile.toURI());
            desktop.browse(errorsFile.toURI());

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo abrir los archivos de reportes.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    
    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Front().setVisible(true);
            }
        });
    }
    
     private int solicitarConfirmacion(String mensaje) {
        // Configurar opciones de botones
        Object[] opciones = {"S√≠", "No"};
        
        // Mostrar el cuadro de di√°logo de opciones
        int seleccion = JOptionPane.showOptionDialog(
                null,
                mensaje,
                "Confirmaci√≥n",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]
        );

        return seleccion;
    }
    
       

    private String buscarArchivoTexto() {
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto (*.df)", "df");
        fc.setFileFilter(filtro);

        int resp = fc.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
           this.nombreArchivo = fc.getSelectedFile().getName();
            return leerContenidoArchivo(fc.getSelectedFile().getPath());
        }
        return "";
    }

    private String leerContenidoArchivo(String rutaArchivo) {
        StringBuilder contenido = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                contenido.append(linea).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace(); // Manejo de errores (puedes personalizarlo seg√∫n tus necesidades)
        }

        return contenido.toString();
    }

    // Otro c√≥digo de tu aplicaci√≥n aqu√≠

    // Ejemplo de c√≥mo podr√≠as usar el m√©todo buscarArchivoTexto
    private String abrirArchivoConExtensionDF() {
        String contenido = buscarArchivoTexto();
        if (!contenido.isEmpty()) {
            // Hacer algo con el contenido del archivo de texto
            return  contenido;
        } else {
            throw new NullPointerException("¬°No se selecciono archivo!");
        }
    }


    
    public void ejecutar(String entrada){
        try{
            Lists.initLists();
           
            String texto = AnalizarArea.getText();
            Lexer scanner = new Lexer(new StringReader(texto)); 
            Parser sintax = new Parser(scanner);
            sintax.parse();
            try {
              ArrayList<IAST> AST = sintax.AST;
              Context context = new Context();
              for (IAST iast : AST) {
                  iast.interpret(context);
              }
              ConsolaTextArea.setText(context.getOut());
              
            } catch (Exception ex) {
                Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                    
                   
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    
               
    
    
    public void asignarIconoAJLabel(String rutaImagen) {
        // Cargar la imagen desde la ruta proporcionada
         ImageIcon icono = new ImageIcon(rutaImagen);

    // Obtener la imagen del icono y ajustar el tama√±o
    java.awt.Image imagen = icono.getImage();
    //java.awt.Image nuevaImagen = imagen.getScaledInstance(LabelImgGrafica.getWidth(), LabelImgGrafica.getHeight(), java.awt.Image.SCALE_SMOOTH);

    // Crear un nuevo ImageIcon con la imagen redimensionada
    //ImageIcon iconoRedimensionado = new ImageIcon(nuevaImagen);

        // Establecer el icono en el JLabel
        //LabelImgGrafica.setIcon(iconoRedimensionado);
    }
    
    public void mensaje(String mjs){
        JOptionPane.showMessageDialog(null, mjs, "Aviso:", JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AnalizarArea;
    private javax.swing.JTextArea ConsolaTextArea;
    private javax.swing.JMenuItem GuardarArchivoOp;
    private javax.swing.JMenuItem GuardarComoArchivoOp;
    private javax.swing.JMenuItem NuevoArchivoOp;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
